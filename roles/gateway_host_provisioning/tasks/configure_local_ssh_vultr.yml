- name: Get instance info
  vultr.cloud.instance_info:
    api_key: '{{ gateway_provider.vultr_api_key }}'
    label: '{{ gateway_instance_name }}'
    region: '{{ gateway_instance_region }}'
  register: instance_info_response
  when: gateway_ip_address is not defined

- name: Set fact main IP
  ansible.builtin.set_fact:
    gateway_ip_address: '{{ instance_info_response.vultr_instance_info[0].main_ip }}'
  when: instance_info_response.vultr_instance_info is defined

- name: Gather facts
  ansible.builtin.gather_facts:
  when: ansible_user_dir is not defined

- name: Set fact for known_hosts file path
  ansible.builtin.set_fact:
    known_hosts_path: '{{ ansible_user_dir + "/.ssh/known_hosts" }}'

- name: Stat known_hosts file
  ansible.builtin.stat:
    path: '{{ known_hosts_path }}'
  register: stat_known_hosts_result

- name: Read known_hosts file
  ansible.builtin.command:
    cmd: 'cat {{ known_hosts_path }}'
  changed_when: false
  register: cat_known_hosts_result
  when: stat_known_hosts_result.stat.exists

- name: Scan gateway public key
  ansible.builtin.command:
    cmd: 'ssh-keyscan -t ed25519 {{ gateway_ip_address }}'
  register: keyscan_result
  when: >-
    cat_known_hosts_result is skipped or
    (
      cat_known_hosts_result.stdout |
      ansible.builtin.regex_search("^" + (gateway_ip_address | replace(".", "\.")) + " ssh-ed25519 .+", multiline=True)
      is not string
    )

- name: Add gateway public key to known_hosts file
  ansible.builtin.known_hosts:
    key: '{{ keyscan_result.stdout }}'
    name: '{{ gateway_ip_address }}'
    state: present
  when: keyscan_result is not skipped
