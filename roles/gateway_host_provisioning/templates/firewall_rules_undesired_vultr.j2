{#
  Generates a hash of a firewall rule.

  Hashes are used to determine which firewall rules should be present vs those
  which should be removed.

  Example:
  "action=accept:ip_type=v4:notes=Allow SSH access from control nodes.:port=22:protocol=tcp:source=:subnet=123.123.123.123:subnet_size=32"
#}
{% macro create_rule_hash(action, ip_type, notes, port, protocol, source, subnet, subnet_size) -%}
{{
  [
    ["action",      action],
    ["ip_type",     ip_type],
    ["notes",       notes],
    ["port",        port],
    ["protocol",    protocol],
    ["source",      source],
    ["subnet",      subnet],
    ["subnet_size", subnet_size]
  ] | map("join", "=") | join(":")
}}
{%- endmacro %}

{#
  Wraps the create_rule_hash macro for use with firewall rules which are locally
  generated. It fills in the fields which would be present on records from the
  Vultr API.
#}
{% macro create_rule_hash_from_generated(ip_type, notes, port, subnet, subnet_size) -%}
{{ create_rule_hash("accept", ip_type, notes, port, "tcp", "", subnet, subnet_size) }}
{%- endmacro%}

{# Create a Jinja namespace so variables can be updated within loops. #}
{%
  set ns = namespace(
    firewall_rule_hashes = [],
    firewall_rules_existing_hash_map = {}
  )
%}

{#
  Generate hashes of the generated firewall rules so we can compare them against
  the rules already present (the ones Vultr reports as being assigned to the
  firewall group).
#}
{% for firewall_rule in firewall_rules %}
  {%
    set ns.firewall_rule_hashes =
      ns.firewall_rule_hashes +
      [create_rule_hash_from_generated(
        firewall_rule.ip_type,
        firewall_rule.notes,
        firewall_rule.port,
        firewall_rule.subnet,
        firewall_rule.subnet_size
      )]
  %}
{% endfor %}

{#
  Generate a lookup table of the existing firewall rules. The keys are their
  hashes, for comparison against the expected generated rules. The values are
  their objects as returned by the Vultr API.
#}
{% for vultr_firewall_rule_info_item in firewall_rules_info_response.vultr_firewall_rule_info %}
  {%
    set ns.firewall_rules_existing_hash_map =
      ns.firewall_rules_existing_hash_map |
      combine({
        create_rule_hash(
          vultr_firewall_rule_info_item.action,
          vultr_firewall_rule_info_item.ip_type,
          vultr_firewall_rule_info_item.notes,
          vultr_firewall_rule_info_item.port,
          vultr_firewall_rule_info_item.protocol,
          vultr_firewall_rule_info_item.source,
          vultr_firewall_rule_info_item.subnet,
          vultr_firewall_rule_info_item.subnet_size
        ): vultr_firewall_rule_info_item
      })
  %}
{% endfor %}

{#
  Filter out the expected rules from the existing rules. Return a list of rules
  needing to be removed.
#}
{{
  ns.firewall_rules_existing_hash_map.keys() |
  ansible.builtin.difference(ns.firewall_rule_hashes) |
  map("ansible.builtin.extract", ns.firewall_rules_existing_hash_map)
}}
